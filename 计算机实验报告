计算机实验报告（第一章）
一、	学习目标
（1）	理解硬件和软件在计算机系统中的不同作用。
（2）	了解成设计语言的发展的过程。
（3）	理解Python\语言的特点以及其重要性。
（4）	掌握Python语言Hello程序的编程的编写方法。
（5）	掌握Python语言开发和运行环境的配置方法。
（6）	理解编写程序的IPO方法。
（7）	了解Python版本更迭过程和旧版本的主要区别。
二、	
三、	实验内容
1、	编写Hello程序
学习编程语言有一个惯例，即运行最简单的Hello程序，该程序是在屏幕上打印输出“Hello Word”.这个程序虽小，但却是初学者接触编程语言的第一步。使用Python语言编写的Hello程序只有一行代码，如下：
print(“hello word”)
上述代码中，print（）代表将括号中引号内的信息输出到屏幕上。该代码在Ptthon运行环境中的执行效果如下：
>>>print(“Hello word”)
Hello Word
其中，第一行的“>>>”是Python语言运行环境的提示符，表示可以在此符号后面输入Python语句。第二行是Python语句的执行结果。
Python语言的Hello程序似乎与人类语言类似，即通过一行语句就完成了输出一段文本的任务。其他编程语言的Hello程序并不这样简洁，如下是C语言的Hello程序，对比一下。
#include<studio.h>
Int main(void)
{
printf(“Hello Word\n”);
return 0;
}
C语言程序除了向屏幕输出“Hello Word”的printf语句外，还包括了include、int、main、printf、return等其他辅助元素，这里就不具体介绍了。这个最小的例子只是一个缩影，Python的简洁性在编程语言领域是公认的。同样功能的程序，Python语言实现额代码行数仅相当于C语言的1/10~1/5。更少的代码行数、更简洁的表达方式将带来更少的程序错误、更快的程序开发速度和更好的可读性。
2.Python语言开发环境配置
IDLE是一个轻量级Python语言开发环境，可以支持交互式和批量式两种编程方式。
运行 Python 程序有两种方式：交互式和文件式。交互式指 Python 解释器即时
X 响应用户输入的每条代码，给出输出结果。文件式，也称为批量式，指用户将Python
程序写在一个或多个文件中，然后启动 Python解释器批量执行文件中的代码。交互
式一般用于调试少量代码，文件式则是最常用的编程方式。其他编程语言通常只有
文件式执行方式。下面以 Windows 操作系统中运行 Hello 程序为例具体说明两种方
式的启动和执行方法。
2.1交互式启动和运行方法
  交互式有两种启动和运行方法。第一种方法，启动 Windows 操作系统命令行工具（<Windows系统安装目录>\ system32lcmd.exe)，在控制台中输入“Python”，在命令提示符>>>后输入如下程序代码：
print("Bello World")
按 Enter 键后显示输出结果“Hello World”，。
在>>>提示符后输入exit0或者 quit）可以退出 Python运行环境。
第二种方法，通过调用安装的IDLE来启动Python运行环境。IDLE是Python
软件包自带的集成开发环境，可以在Windows“开始”菜单中搜索关键词“IDLE”
IDLE的捷方式。
2.22.文件式启动和运行方法 
文件式也有两种运行方法，与交互式相对应。
第一种方法，按照 Python的语法格式编写代码，并保存为.py形式的文件以
Hello Word 程序为例，将代码保存成文件hello.py。Python 代码可以在任意编辑器
中编写，对于百行以内规模的代码建议使用Pythion安装包中的IDLE编辑器或者第
三方开源记事本增强工具Notepad++。然后，打开Windows的命令行（cmd.exe），
进入hello.py文件所在目录，运行Python程序文件获得输出
第二种方法，打开IDLE，按快捷键Ctrl+N打开一个新窗口，或在菜单中选择
File一New File选项。这个新窗口不是交互模式，它是一个具备 Python 语法高亮辅
助的编辑器，可以进行代码编辑。在其中输入Python 代码，例如，输入Hello World
程序并保存为hello.py文件。
2、	运行Python小程序
Hello Word程序只有一行代码，实在太小。本文给出3个3行代的左右的Python“微实例”，供读者在HDLE交互式和批量式两种方式下练习。这些微实例分别给出了交互式执行过程和文件式内容（即全部程序内容）。请设者暂时忽略这些实例中程序的具体语法含义，这正是接下来要学习的内？当然，尝试理解语法也十分有益。请在IDLE 交互环境或编辑器中编写并运行这些程序，确保它们可以输出正确结果。注意：在编辑器中输入代码时，#及后面的文字是注释，仅用来帮助读者理解程序，不影响程序执行，可以不用输入。
3、	【微实例1.1】圆面积的计算。
根据圆的半径计算圆的面积。交互式执行过程如下。
>>>radius = 25 # 圆的半径是 25
>>>area= 3.1415 * radius + radius # 输入计算圆面积的公式
>>>print (area)
1963.4375000000002
>>>print（"(:.2f）".format(area）) # 只输出两位小数
1963.44
微实例1.1的文件式内容如下，其中，首行微实例文件名对应本书的电子
文件名国“读者可以将代码保存为任意名称，左侧序号为代码行号，以辅助阅读，
不是程序代码的组成部分。
微实例 1.1
  radius = 25      # 圆的半径是 25   
 area = 3.1415 * radius * radius     # 输入计算圆面积的公式
print(area)
print("{:.2f）".format(area))         # 只输出两位小数
【微实例1.2】简单的人名对话。
对用户输入的人名给出一些不同的回应。交互式执行过程如下：
>>>name= input("输入姓名："）
输入姓名：郭靖
>>>print("（）同学，学好Python，前途无量！”.format(name））
郭靖同学，学好Python，前途无量！
>>>print("（）大侠，学好Python，大展拳脚！".format（name[0]））
郭大侠，学好Python，大展拳脚！
>>>print（"{）哥哥，学好Python，人见人爱！”.format(name[1:））
靖哥哥，学好Python，人见人爱！
微实例1.2的文件式内容如下：
微实例 1.2  
name = input("输入姓名：") 
print("（）同学，学好Python，前途无量！".format(name））
print（"（）大侠，学好Python，大展拳脚！”.format（name[0]））
print("（）哥哥，学好Python，人见人爱！”.format(name[1:））
【微实例1.3】斐波那契数列的计算。
根据斐波那契数列的定义，输出不大于1000的序列元素。交互式执行过程
如下。
>>>a, b = 0, 1
>while a < 1000: # 输出不大于1000的序列
print(a, end=’，’)
a, b = b, a + b
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
上述代码中，连续的3个大于号（>>>）给出首行输入提示，3个连续点（·）
给出二级输入提示，表示延续上一行内容。这3个连续点在IDLE环境中可能出现
（较早的版本）或不出现（最新版本），如果不出现则会出现连续空格。
1-4： 微实例 1.3 
a, b = 0,1
 while a < 1000: # 输出不大于 1000的序列
 print(a, end=’，’)
 a,b =b，a +b
3、本章小结
本章具体讲解了计算机的基本定义、计算机的功能性和可编程性、程序设计语
言分类、编译和解释、Python语言的历史和发展、配置Python开发环境等内容，最
后给出了Python版本的主要区别供读者参考。
